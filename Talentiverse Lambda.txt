import json
import boto3
import base64
import re
import uuid
from urllib.parse import parse_qs

s3 = boto3.client('s3')
dynamodb = boto3.resource('dynamodb')

bucket_name = 'talentiverse-cv-bucket'  # Replace with your S3 bucket name
table_name = 'Talentiverse_Table'  # DynamoDB table name

def lambda_handler(event, context):
    try:
        if 'body' not in event:
            raise ValueError("Missing 'body' in the event")
        
        form_data = parse_qs(event['body'])
        name = form_data.get('name', [''])[0]
        surname = form_data.get('surname', [''])[0]
        email = form_data.get('email', [''])[0]
        file_data = form_data.get('cv', [None])[0]

        print({
            'name': name,
            'surname': surname,
            'email': email,
        })

        if not validate_email(email):
            return {
                'statusCode': 400,
                'body': json.dumps({'error': 'Invalid email address'})
            }

        if file_data:
            file_name = f'{uuid.uuid4()}.pdf'
            s3.put_object(Bucket=bucket_name, Key=file_name, Body=base64.b64decode(file_data))
        
            # Store data in DynamoDB
            item_id = str(uuid.uuid4())  # Ensure this matches the primary key name in your table (e.g., ID)
            table = dynamodb.Table(table_name)
            table.put_item(
                Item={
                    'ID': item_id,  # Change this to match your primary key attribute name
                    'name': name,
                    'surname': surname,
                    'email': email,
                    'file_name': file_name
                }
            )

        return {
            'statusCode': 200,
            'body': json.dumps({'message': 'Details successfully posted!'})
        }
    except Exception as e:
        return {
            'statusCode': 500,
            'body': json.dumps({'error': str(e)})
        }

def validate_email(email):
    return re.match(r"[^@]+@[^@]+\.[^@]+", email)
